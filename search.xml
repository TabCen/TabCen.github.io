<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>手冲咖啡药方</title>
      <link href="/20200711-be-reasonable.html"/>
      <url>/20200711-be-reasonable.html</url>
      
        <content type="html"><![CDATA[<h2 id="症状"><a href="#症状" class="headerlink" title="症状"></a>症状</h2><blockquote><p>生活不规律，上班状态不佳。爱吸烟，想戒烟</p></blockquote><h2 id="药方"><a href="#药方" class="headerlink" title="药方"></a>药方</h2><ul><li>手冲咖啡</li><li>每天早晨早餐结束后到公司先来一杯手冲咖啡</li></ul><h2 id="制作方法"><a href="#制作方法" class="headerlink" title="制作方法"></a>制作方法</h2><ul><li>20g咖啡豆，磨粉（粗砂糖颗粒状）</li><li>过滤萃取出 320g 咖啡液体（萃取方式可以日式单点法，三段式，冰咖）</li></ul><h2 id="服用方式"><a href="#服用方式" class="headerlink" title="服用方式"></a>服用方式</h2><ul><li>前期少量，可以将多余的咖啡分享给其他患者</li><li>中期适度</li><li>后期可调整换制作方式，可采取法压壶、摩卡壶做咖啡。或者购买深烘，重度烘焙的咖啡豆</li></ul><h2 id="疗效"><a href="#疗效" class="headerlink" title="疗效"></a>疗效</h2><ul><li>工作状态饱满</li><li>做事规范有原则</li><li>成功戒烟，且反感抽烟</li><li>享受制作咖啡时的那份安逸</li></ul><h2 id="副作用-amp-注意事项"><a href="#副作用-amp-注意事项" class="headerlink" title="副作用&amp;注意事项"></a>副作用&amp;注意事项</h2><ul><li>下午3点之后喝咖啡可能导致晚上失眠</li><li>切记不要一天又喝咖啡又喝茶，容易失眠</li><li>肾不好，别喝</li><li>容易咖啡上瘾</li></ul>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>绝对定位和相对定位性能对比实践记录</title>
      <link href="/20200628-20200628-layout.html"/>
      <url>/20200628-20200628-layout.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目标: 通过 <code>Chrome DevTools</code> 来熟悉了解浏览器渲染页面过程，以及一些布局的性能对比</p></blockquote><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ul><li>1、工具 <code>Chrome DevTools</code> 中 <code>Performance</code> (原Timeline)<a href="https://developers.google.com/web/tools/chrome-devtools/evaluate-performance/timeline-tool?hl=zh_cn" target="_blank" rel="noopener">工具使用介绍</a></li><li>2、用来测试代码 <a href="./../code/web/index.html">index.html</a></li></ul><p>html代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 中间省略 998个&lt;div class="block1"&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>css 样式一<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block1</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>css 样式二<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block1</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、查看Performance"><a href="#二、查看Performance" class="headerlink" title="二、查看Performance"></a>二、查看Performance</h2><p><img src="./../image/performance.png" alt="performance.png"></p><h3 id="观察Main"><a href="#观察Main" class="headerlink" title="观察Main"></a>观察<code>Main</code></h3><p><img src="./../image/performance-main.png" alt="performance-main.png"></p><h3 id="从图中发现浏览器展示网页的几个阶段："><a href="#从图中发现浏览器展示网页的几个阶段：" class="headerlink" title="从图中发现浏览器展示网页的几个阶段："></a>从图中发现浏览器展示网页的几个阶段：</h3><ul><li>解析 HTML 阶段 （Parse HTML）<ul><li>样式计算  (Recalculate Style)</li></ul></li><li>布局阶段 (Layout)</li><li>更新图层树阶段 (Updata Layer Tree)</li><li>图层绘制阶段 (Paint)</li></ul><p>（这里不细说每个步骤都做了什么，若想研究，可另翻源码啃读）</p><h2 id="三、对比布局在这几个阶段的时间消耗"><a href="#三、对比布局在这几个阶段的时间消耗" class="headerlink" title="三、对比布局在这几个阶段的时间消耗"></a>三、对比布局在这几个阶段的时间消耗</h2><p>对比结果如下：</p><p><img src="./../image/performance-contrast.png" alt="performance-contrast.png"></p><p>从几组数据对比发现，绝对定位在布局阶段耗用的时间明显比相对定位要长。<br>（有兴趣可以扩大数据进行对比）</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>思维的转变：<br>之前一直认为，前端的布局和iOS一样，直接设置位置会是渲染效率最高的方案。实验结果发现，绝对定位消耗时间更长，效率并不高<br>如何深层次研究：<br>个人认为，这里只是浅尝辄止。犹如只说“一个是脱离文档流了”罢了。具体原因待研究低层源码</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200518-cocos小游戏开发系列三</title>
      <link href="/20200518-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B8%89.html"/>
      <url>/20200518-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B8%89.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>cocos开发小游戏过程中，由于发布平台的不同，可能需要对不同平台做兼容处理。本文就是介绍如何采用<code>简单工厂模式</code>实现平台兼容。<br>同时，可以在开发过程中快速浏览页面效果，无须构建到不同平台再用各种平台IDE进行查看页面；极大得提升了工作效率。</p></blockquote><ul><li>构建平台：浏览器、微信小程序</li><li>语言：TS （由于TS具有类型检测，以及通用的面向对象编程方式）</li></ul><h2 id="设计接口-platformInterface-ts"><a href="#设计接口-platformInterface-ts" class="headerlink" title="设计接口 platformInterface.ts"></a>设计接口 platformInterface.ts</h2><ul><li>在微信小游戏环境中，可以直接调用 wx.showToast()来创建一个弹框。如果直接在业务代码中直接调用wx.showToast()在浏览器中必然报错。’wx’ is not defined,所以。先抽出一个公用接口，里面是一些常用的功能方法声明。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">interface</span> PlatformInterface &#123;</span><br><span class="line">  showToast(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">  showModal(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">  showLoading(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">  hideLoading(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">  hideToast(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">  showActionSheet(object?: <span class="built_in">Object</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="构建不同平台的实现类"><a href="#构建不同平台的实现类" class="headerlink" title="构建不同平台的实现类"></a>构建不同平台的实现类</h2><p><strong> 注意 </strong> ： 在ts中如果没有声明<code>wx</code>直接调用wx方法会报错。编译失败。所以，创建一个文件使用declare告诉编译器 “<code>wx</code>是存在的”</p><h3 id="首先定义-wx"><a href="#首先定义-wx" class="headerlink" title="首先定义 wx"></a>首先定义 <code>wx</code></h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 wx.d.ts 文件中声明wx对象。</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">var</span> wx;</span><br></pre></td></tr></table></figure><h3 id="PlatformWx-ts中"><a href="#PlatformWx-ts中" class="headerlink" title="PlatformWx.ts中"></a>PlatformWx.ts中</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PlatformInterface <span class="keyword">from</span> <span class="string">"./platformInterface"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> PlatformWx <span class="keyword">implements</span> PlatformInterface&#123;</span><br><span class="line">  <span class="comment">//MARK : PlatformInterface</span></span><br><span class="line">  showToast(object): <span class="built_in">void</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"showToast"</span>,wx);</span><br><span class="line">    wx.showToast(object) <span class="comment">// 此处注意 在ts中如果未定义wx 此处会报错。所以</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PlatformWeb-ts中"><a href="#PlatformWeb-ts中" class="headerlink" title="PlatformWeb.ts中"></a>PlatformWeb.ts中</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PlatformInterface <span class="keyword">from</span> <span class="string">"./platformInterface"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> PlatformWeb <span class="keyword">implements</span> PlatformInterface &#123;</span><br><span class="line">  <span class="comment">//MARK : PlatformInterface</span></span><br><span class="line">  showToast() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"____web"</span>);</span><br><span class="line">    alert(<span class="string">"__web"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="定义实现对象cg"><a href="#定义实现对象cg" class="headerlink" title="定义实现对象cg"></a>定义实现对象<code>cg</code></h2><p>最后根据不同的环境声明不同的实现方法</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PlatformWeb <span class="keyword">from</span> <span class="string">"./_web"</span>;</span><br><span class="line"><span class="keyword">import</span> PlatformWx <span class="keyword">from</span> <span class="string">"./_wx"</span>;</span><br><span class="line"><span class="keyword">import</span> PlatformInterface <span class="keyword">from</span> <span class="string">"./platformInterface"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cg: PlatformInterface = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'env'</span>,cc.sys.browserType);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'wx'</span>,cc.sys.BROWSER_TYPE_WECHAT_GAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> (cc.sys.browserType) &#123;</span><br><span class="line">  <span class="keyword">case</span> cc.sys.BROWSER_TYPE_WECHAT_GAME:&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前环境 wxgame'</span>)</span><br><span class="line">    cg = <span class="keyword">new</span> PlatformWx()</span><br><span class="line">  &#125;<span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'当前环境 webgame'</span>)</span><br><span class="line">    cg = <span class="keyword">new</span> PlatformWeb()</span><br><span class="line">  &#125;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> cg;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此处采用<code>简单工厂模式</code>处理类不同的实现逻辑。可提高代码的扩展性。如果后期需要加不同的平台，只需要再创建一个平台类实现了PlatformInterface就可以了。<br>类似的需求还有：</p><ul><li>网络请求封装</li><li>数据存储逻辑封装</li></ul>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200510-cocos小游戏系列二</title>
      <link href="/20200510-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%B3%BB%E5%88%97%E4%BA%8C.html"/>
      <url>/20200510-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E7%B3%BB%E5%88%97%E4%BA%8C.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇介绍我设计的游戏页面基类BaseScene。用来虚拟一个页面栈，以及模拟一个onshow方法。</p></blockquote><ul><li>cocos只允许同时渲染一个场景,构建一个页面栈就非常必要</li><li>一个场景只有onLoad()和start()两个生命周期方法。页面再次渲染时无 onShow()</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sceneStack: <span class="built_in">Array</span>&lt;cc.Node&gt; = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> BaseScene <span class="keyword">extends</span> cc.Component &#123;</span><br><span class="line">  <span class="comment">// 主导演</span></span><br><span class="line">  <span class="keyword">public</span> director: cc.Director = cc.director;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> sceneStack = sceneStack;</span><br><span class="line"></span><br><span class="line">  onDestroy() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"***********"</span>,<span class="keyword">this</span>.name,<span class="string">" onDestroy ************"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 模拟的生命周期方法</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  onShowFromStack()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onShowFromStack 子类重写"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * pushScene &amp; popScene 配合使用</span></span><br><span class="line"><span class="comment">   * @param scene 需要push的场景名</span></span><br><span class="line"><span class="comment">   * @param onLaunched 场景加载完成后的回调方法</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  pushScene(scene: <span class="built_in">string</span>, onLaunched?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"pushScene"</span>);</span><br><span class="line">    cc.game.addPersistRootNode(<span class="keyword">this</span>.node);</span><br><span class="line">    <span class="keyword">this</span>.sceneStack.push(<span class="keyword">this</span>.node);</span><br><span class="line">    <span class="keyword">this</span>.director.loadScene(scene, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.node.active = <span class="literal">false</span>;</span><br><span class="line">      <span class="comment">//打印</span></span><br><span class="line">      <span class="comment">// printStack()</span></span><br><span class="line">      onLaunched &amp;&amp; onLaunched(options);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * popScene &amp; pushScene</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  popScene() &#123;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="keyword">this</span>.sceneStack.pop();</span><br><span class="line">    node.active = <span class="literal">true</span>;</span><br><span class="line">    node.getComponent(<span class="string">'BaseScene'</span>).onShowFromStack()</span><br><span class="line">    cc.game.removePersistRootNode(node);</span><br><span class="line">    <span class="keyword">this</span>.node.destroy()</span><br><span class="line">    <span class="keyword">this</span>.destroy()</span><br><span class="line">    <span class="comment">//打印</span></span><br><span class="line">    <span class="comment">// printStack()</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 替换Scene</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  replaceScene(scene: <span class="built_in">string</span>, onLaunched?: <span class="built_in">Function</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.director.loadScene(scene, <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//打印</span></span><br><span class="line">      <span class="comment">// printStack()</span></span><br><span class="line">      onLaunched &amp;&amp; onLaunched(options);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解读"><a href="#解读" class="headerlink" title="解读"></a>解读</h2><ul><li>在页面<code>pushScene</code>时将页面<code>node</code>设置为常驻节点并隐藏，并且将<code>node</code>存入栈<code>sceneStack</code>中。</li><li>当页面<code>popScene</code>时，在栈中取出栈顶元素，将栈顶元素取消常驻节点并设置显示，并且将当前页面销毁。</li><li>在<code>popScene</code>时适时调用<code>onShowFromStack</code>方法，用来模拟一个<code>onshow</code>方法</li></ul><h2 id="待开源"><a href="#待开源" class="headerlink" title="待开源"></a>待开源</h2>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20200509-游戏开发框架搭建一</title>
      <link href="/20200509-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B8%80.html"/>
      <url>/20200509-cocos%E5%B0%8F%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E7%B3%BB%E5%88%97%E4%B8%80.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章介绍游戏开发过程中如果将游戏开发工程化，像开发app一样开发游戏</p></blockquote><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><ul><li>TypeScript 语言</li><li>cocos 引擎</li><li>CocosCreator、VSCode 开发工具</li></ul><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">/animations      -- 动画资源</span><br><span class="line">    /animation_anim</span><br><span class="line">    /animation_prefab</span><br><span class="line">    /animation_texture</span><br><span class="line">/base</span><br><span class="line">    BaseScene.ts</span><br><span class="line">    BasePrefab.ts</span><br><span class="line">/components      -- 公用组件 预制体、脚本</span><br><span class="line">    /popup</span><br><span class="line">        basePopup.ts</span><br><span class="line">        popup.prefab</span><br><span class="line">    /other</span><br><span class="line">/resources       -- loadRes 动态加载</span><br><span class="line">/scene</span><br><span class="line">    /MainScene</span><br><span class="line">        MainScene.fire</span><br><span class="line">        MainScene.ts</span><br><span class="line">/static</span><br><span class="line">    /images          -- 图片资源</span><br><span class="line">    /media           -- 媒体资源</span><br><span class="line">/utils           -- 工具类</span><br><span class="line">    common.js</span><br><span class="line">    globalFunction.js</span><br><span class="line">    md5.js</span><br><span class="line">    /api</span><br><span class="line">        token.js</span><br><span class="line">        http.js</span><br></pre></td></tr></table></figure><p>着重讲一下，抽离基类 BaseScene.ts、BasePrefab.ts，将一些相关方法封装到BaseScene.ts中，其他的场景均继承自基类。这样做的好处</p><ul><li>代码更加洁简</li><li>增加可重构性</li></ul><p><strong>注意</strong><br>不建议封装功能特别大、多的基类。这样增加了基类的耦合性。可将同类方法抽离成接口。再在不同的类中进行继承。仅仅是为了去重而写基类是不合理的</p><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">资源    icon_btn_1.jpg  短横线</span><br><span class="line">预制体  popup_prefab.prefab</span><br><span class="line">场景    MainScene 大驼峰</span><br><span class="line">脚本    小驼峰</span><br><span class="line">变量    小驼峰  </span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timeScope</span> = <span class="number">242342</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">_this</span> = this</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">_scope</span> = scope</span><br></pre></td></tr></table></figure><h2 id="脚本规范"><a href="#脚本规范" class="headerlink" title="脚本规范"></a>脚本规范</h2><ul><li>添加<code>MARK</code>标记</li><li>冗余代码删除</li><li>缩进 两个空格</li><li>onClick***</li><li>function 单一职责：一个方法，一个功能，解耦</li></ul><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// MARK: 属性声明</span></span><br><span class="line"><span class="comment">/// MARK: 生命周期函数</span></span><br><span class="line"><span class="comment">/// MARK: 私有方法</span></span><br><span class="line"><span class="comment">/// MARK: 网络请求</span></span><br><span class="line">    request_home<span class="comment">()</span></span><br></pre></td></tr></table></figure><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>虽未深入涉足游戏开发，但是感觉目前的游戏开发社区依然不够火热（可能是相较于其他开发领域）。游戏开发工程师可能在开发游戏的过程中忽略了游戏开发也属于一项软件工程。而软件工程架构设计和规范是值得思考的。游戏开发过程中不能仅仅关注游戏的界面。在这段时间使用cocoscreator开发小程序的过程中发现，大多数游戏开发工程师在进行游戏开发时，更多得使用可视化的拖控件功能。这种操作非常不够技术性。更加偏向于美工设计工作。我个人更加提倡游戏开发者应该将重点聚焦在逻辑实现和代码的架构方向。譬如，去了解MVC、去构建页面栈、多平台兼容等</p>]]></content>
      
      
      <categories>
          
          <category> 游戏 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack打包解析二</title>
      <link href="/20200422-20200422-webpack-bundle-loader.html"/>
      <url>/20200422-20200422-webpack-bundle-loader.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目的：接上一文，本文解析 webpack打包带css-loader的bundle文件</p></blockquote><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ul><li><p>1、./src/main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./main.css'</span>;</span><br><span class="line"><span class="keyword">let</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>)</span><br><span class="line">div.classList.add(<span class="string">'test'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'css-loader'</span>)</span><br></pre></td></tr></table></figure></li><li><p>2、./src/main.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、webpack.config.js</p><ul><li><strong>注意在使用css-loader 时需要加载 <code>style-loader</code> 和 <code>css-loader</code>,且顺序不可写错</strong></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">'style-loader'</span>,</span><br><span class="line">          <span class="string">'css-loader'</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>4、打包生成的文件<br><a href="./../code/loader/main.bundle.loader.js">main.bundle.js</a></p></li><li><p>5、打包后的文件是一个IIFE自执行函数表达式，根据上文解析。函数体部分作用就是递归加载参数模块。</p></li></ul><p>模块区分如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"./node_modules/css-loader/dist/cjs.js!./src/main.css"</span>:</span><br><span class="line">   (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">     <span class="built_in">eval</span>(<span class="string">"// Imports..."</span>);</span><br><span class="line">    &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="string">"./node_modules/css-loader/dist/runtime/api.js"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"//..."</span>);</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="string">"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"//..."</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  </span><br><span class="line">  <span class="string">"./src/main.css"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"//..."</span>);</span><br><span class="line">  &#125;),</span><br><span class="line"></span><br><span class="line">  <span class="string">"./src/main.js"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, __webpack_exports__, __webpack_require__</span>) </span>&#123;</span><br><span class="line"><span class="meta">    "use strict"</span>;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"//..."</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>6、将webpack<strong>编译好</strong>的5个<strong>单模块字符串</strong>整理成5个js文件以方便分析<ul><li><a href="./../code/loader/css-loader.api.js">./node_modules/css-loader/dist/runtime/api.js</a></li><li><a href="./../code/loader/style-loader.injectStylesIntoStyleTag.js.js">./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js</a></li><li><a href="./../code/loader/main.js.js">main.js.js</a> webpack 编译完main.js后生成的js文件</li><li><a href="./../code/loader/main.css.js">main.css.js</a>  webpack 编译完main.css后生成的js文件</li><li><a href="./../code/loader/cjs.js.main.css.js">cjs.js!./src/main.css.js</a></li></ul></li></ul><h2 id="二、部分解读"><a href="#二、部分解读" class="headerlink" title="二、部分解读"></a>二、部分解读</h2><ul><li>2.1、css-loader 中的api.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">useSourceMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> list = []; <span class="comment">// return the list of modules as css string</span></span><br><span class="line"></span><br><span class="line">  list.toString = <span class="function"><span class="keyword">function</span> <span class="title">toString</span>(<span class="params"></span>) </span>&#123;<span class="comment">//... 定义了一个toStirng方法 &#125;;</span></span><br><span class="line"></span><br><span class="line">  list.i = <span class="function"><span class="keyword">function</span> (<span class="params">modules, mediaQuery, dedupe</span>) </span>&#123;<span class="comment">//... 定义了一个i 方法 &#125;;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cssWithMappingToString</span>(<span class="params">item, useSourceMap</span>)</span></span><br><span class="line"><span class="function"><span class="title">function</span> <span class="title">toComment</span>(<span class="params">sourceMap</span>)</span></span><br></pre></td></tr></table></figure><pre><code>- 不难发现css-loader 返回了一个空的数组 []. 且在这个数组方法上挂了几个方法</code></pre><ul><li>2.2、cjs.js!./src/main.css.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ___CSS_LOADER_API_IMPORT___ = __webpack_require__(<span class="comment">/*! ../node_modules/css-loader/dist/runtime/api.js */</span> <span class="string">"./node_modules/css-loader/dist/runtime/api.js"</span>);</span><br><span class="line">exports = ___CSS_LOADER_API_IMPORT___(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// Module</span></span><br><span class="line">exports.push([<span class="built_in">module</span>.i, <span class="string">".test&#123;\</span></span><br><span class="line"><span class="string">  color: red;\</span></span><br><span class="line"><span class="string">  background-color: blue;\</span></span><br><span class="line"><span class="string">&#125;"</span>, <span class="string">""</span>]);</span><br><span class="line"><span class="comment">// Exports</span></span><br><span class="line"><span class="built_in">module</span>.exports = exports;</span><br></pre></td></tr></table></figure><pre><code>- 得到了一个 [&quot;样式表名&quot;,&quot;样式字符串&quot;,&quot;&quot;] 这样的一个数据原（元组）</code></pre><ul><li>2.3、main.css.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> api = __webpack_require__(<span class="comment">/*! ../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */</span> <span class="string">"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"</span>);</span><br><span class="line"><span class="keyword">var</span> content = __webpack_require__(<span class="comment">/*! !../node_modules/css-loader/dist/cjs.js!./main.css */</span> <span class="string">"./node_modules/css-loader/dist/cjs.js!./src/main.css"</span>);</span><br><span class="line"></span><br><span class="line">content = content.__esModule ? content.default : content;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> content === <span class="string">'string'</span>) &#123;</span><br><span class="line">  content = [[<span class="built_in">module</span>.i, content, <span class="string">''</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">options.insert = <span class="string">"head"</span>;</span><br><span class="line">options.singleton = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> update = api(content, options);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exported = content.locals ? content.locals : &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = exported;</span><br></pre></td></tr></table></figure><pre><code>- 不难发现 main.css.js 主要执行了的方法就是 api(content, options);</code></pre><ul><li>2.4、injectStylesIntoStyleTag.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">modulesToDom</span>(<span class="params">list, options</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// ...</span></span><br><span class="line">      stylesInDom.push(&#123;</span><br><span class="line">        identifier: identifier,</span><br><span class="line">        updater: addStyle(obj, options),</span><br><span class="line">        references: <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> identifiers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertStyleElement</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(attributes).forEach(<span class="function"><span class="keyword">function</span> (<span class="params">key</span>) </span>&#123;</span><br><span class="line">    style.setAttribute(key, attributes[key]);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> style;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addStyle</span>(<span class="params">obj, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  style = insertStyleElement(options);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">list, options</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lastIdentifiers = modulesToDom(list, options);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">newList</span>) </span>&#123; <span class="comment">// ... &#125;;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><pre><code>- 最终发现 通过injectStylesIntoStyleTag.js动态得生成style标签，再将.css中的样式挂载到style标签中</code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul><li><p>webpack 打包带css-loader、style-loader的脚本执行过程，是通过css-loader生成对应的css样式 <code>[&quot;样式表名&quot;,&quot;样式字符串&quot;,&quot;&quot;]</code> 数组。再通过 style-loader 挂载到 <code>&lt;style&gt;</code> 标签上。</p></li><li><p>此篇文章写得不伦不类。建议仔细分析打包后的bundle.js文件。本文仅做参考</p></li></ul><blockquote><p>在阅读代码过程中，我们得抽丝剥茧，专注于执行过程。对于阅读过程中遇到的定义部分先做忽略即可。等调用时再做思考。这样才能让我们更加专注</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack打包解析一</title>
      <link href="/20200421-20200421-webpack-bundle-resolve.html"/>
      <url>/20200421-20200421-webpack-bundle-resolve.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目的：解析 webpack 打包出来的最简单的一个bundle.js脚本</p></blockquote><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a>一、准备</h2><ul><li><p>1、./src/main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">'./test'</span>);</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hellowebpack"</span>)</span><br></pre></td></tr></table></figure></li><li><p>2、./src/test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'log test'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>3、webpack.config.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  mode: <span class="string">'development'</span>,</span><br><span class="line">  entry: &#123;</span><br><span class="line">    main: <span class="string">'./src/main.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].bundle.js'</span>,</span><br><span class="line">    path: path.resolve(__dirname,<span class="string">'dist'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>4、打包生成的文件<br><a href="./../code/main.bundle.js">main.bundle.js</a></p></li></ul><h2 id="二、处理main-bundle-js"><a href="#二、处理main-bundle-js" class="headerlink" title="二、处理main.bundle.js"></a>二、处理main.bundle.js</h2><p><a href="./../code/main.bundle.resolve.js">main.bundle.js 简化处理的文件</a></p><h3 id="2-1、自执行函数表达式-IIFE"><a href="#2-1、自执行函数表达式-IIFE" class="headerlink" title="2.1、自执行函数表达式 IIFE"></a>2.1、自执行函数表达式 IIFE</h3><ul><li>不难发现整体js是一个自执行函数表达式IIFE  <code>(FUNCTION)(PARAMS);</code></li><li>IIFE 的函数体部分<code>（FUNCTION）</code> 内部定义了一个函数 <code>__webpack_require__</code>，返回的是执行<code>__webpack_require__(&quot;./src/main.js&quot;);</code>结果。</li><li>IIFE 的参数部分是一个 Map {key:value},key为路径，value为函数 <code>function(module,exports,__webpack_require__){}</code>，函数执行 eval(“string”)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      exports: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 步骤一</span></span><br><span class="line">    modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__(__webpack_require__.s = <span class="string">"./src/main.js"</span>);</span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="string">"./src/main.js"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"const test = __webpack_require__(/*! ./test */ \"./src/test.js\");\n\ntest()\n\nconsole.log(\"hellowebpack\")\n\n\n//# sourceURL=webpack:///./src/main.js?"</span>);</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="string">"./src/test.js"</span>:</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"module.exports = function()&#123;\n  console.log('log test')\n&#125;\n\n//# sourceURL=webpack:///./src/test.js?"</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-2、IIFE的执行"><a href="#2-2、IIFE的执行" class="headerlink" title="2.2、IIFE的执行"></a>2.2、IIFE的执行</h3><ul><li>先定义 <code>installedModules</code> 用来存储加载成功的模块</li><li>定义内部函数 <code>function __webpack_require__(moduleId){}</code></li><li>触发内部函数 <code>__webpack_require__(__webpack_require__.s = &quot;./src/main.js&quot;);</code> 此处传入的参数即为 配置中的entry 入口路径</li><li><code>__webpack_require__(&quot;./src/main.js&quot;)</code> 直至运行到 <code>步骤一</code></li></ul><h3 id="2-3、Function-prototype-call-执行加载模块"><a href="#2-3、Function-prototype-call-执行加载模块" class="headerlink" title="2.3、Function.prototype.call() 执行加载模块"></a>2.3、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">Function.prototype.call()</a> 执行加载模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">modules[moduleId].call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br></pre></td></tr></table></figure><ul><li>此时开始真正的加载模块, 获取 自执行函数参数（PARAMS）的 ‘./src/main.js’ 模块。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">module, exports, __webpack_require__</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"const test = __webpack_require__(/*! ./test */ \"./src/test.js\");\n\ntest()\n\nconsole.log(\"hellowebpack\")\n\n# sourceURL=webpack:///./src/main.js?"</span>);</span><br><span class="line">  &#125;).call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br></pre></td></tr></table></figure><ul><li>加载过程中 使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval" target="_blank" rel="noopener">eval(str)</a> 函数执行webpack<strong>编译好</strong>的<strong>单模块字符串</strong></li><li>webpack 在编译js文件时遇到依赖模块，会将依赖方法替换成 <code>__webpack_require__</code> 函数。如 <code>const test = __webpack_require__(/*! ./test */ \&quot;./src/test.js\&quot;);</code></li><li>eval()在执行过程，再递归调用 <code>__webpack_require__</code> 函数来加载对应的依赖模块</li></ul><h3 id="2-4、递归调用-webpack-require-quot-src-test-js-quot"><a href="#2-4、递归调用-webpack-require-quot-src-test-js-quot" class="headerlink" title="2.4、递归调用 __webpack_require__(&quot;./src/test.js&quot;)"></a>2.4、递归调用 <code>__webpack_require__(&quot;./src/test.js&quot;)</code></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">eval</span>(<span class="string">"module.exports = function()&#123;\n  console.log('log test')\n&#125;\n\n//# sourceURL=webpack:///./src/test.js?"</span>);</span><br><span class="line">  &#125;).call(<span class="built_in">module</span>.exports, <span class="built_in">module</span>, <span class="built_in">module</span>.exports, __webpack_require__);</span><br></pre></td></tr></table></figure><ul><li>将 test.js 中的 exports 挂载到 module.exports中。完成函数调用</li><li>递归的<code>__webpack_require__</code>函数调用。执行了模块代码.且将模块加载结果保存到 installedModules 中。如上执行结果，installedModules 结果如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">installedModules = &#123;</span><br><span class="line">  <span class="string">"./src/main.js"</span>:&#123;</span><br><span class="line">    i: <span class="string">"./src/main.js"</span>,</span><br><span class="line">    l: <span class="literal">true</span>,</span><br><span class="line">    exports: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"./src/test.js"</span>:&#123;</span><br><span class="line">    i: <span class="string">"./src/test.js"</span>,</span><br><span class="line">    l: <span class="literal">true</span>,</span><br><span class="line">    exports: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'log test'</span>)&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><ul><li>本文解析的是webpack打包完成的bundle.js。讲的是webpack的<code>执行流程</code>而非<code>编译过程</code>。</li><li>IIFE中的函数体部分<code>(FUNCTION)</code>目的是递归的加载<code>(PARAMS)</code>中的模块代码</li></ul><blockquote><p>下一篇：分析 带loader的 webpack打包出来的bundle.js脚本</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何变成靠谱的人?</title>
      <link href="/20191123-be-reasonable.html"/>
      <url>/20191123-be-reasonable.html</url>
      
        <content type="html"><![CDATA[<h2 id="一个靠谱的人应该具有什么特质？"><a href="#一个靠谱的人应该具有什么特质？" class="headerlink" title="一个靠谱的人应该具有什么特质？"></a>一个靠谱的人应该具有什么特质？</h2><h3 id="1、工作有态度"><a href="#1、工作有态度" class="headerlink" title="1、工作有态度"></a>1、工作有态度</h3><ul><li>给人确定性</li><li>提高做事标准，不满足现状</li></ul><h3 id="2、能力超预期"><a href="#2、能力超预期" class="headerlink" title="2、能力超预期"></a>2、能力超预期</h3><ul><li>专业</li></ul><h3 id="3、做事有结果"><a href="#3、做事有结果" class="headerlink" title="3、做事有结果"></a>3、做事有结果</h3><ul><li>做事有结果，有反馈，</li><li>敢于担当</li></ul><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>其实就是做事情的三个阶段：<strong> 做事前 – 做事中 – 做事后 </strong></p><p>做事前，能给人确定性，这个确定性不仅仅告诉人这个方案可以实现，而是能让人放心你可以做好它；你得有一个自己的做事标准。而这个标准是需要不断去提高的。</p><p>做事中，你得有专业的技术，精湛的技能总能赢得一片喝彩。</p><p>做事后，做事情得有结果，有始还得有终。当然你得有担当。而真正做到这却不是很简单</p>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年3月份总结</title>
      <link href="/20190331-Mar-work-conclusion.html"/>
      <url>/20190331-Mar-work-conclusion.html</url>
      
        <content type="html"><![CDATA[<h1 id="2019年3月份总结"><a href="#2019年3月份总结" class="headerlink" title="2019年3月份总结"></a>2019年3月份总结</h1><h2 id="1、工作上"><a href="#1、工作上" class="headerlink" title="1、工作上"></a>1、工作上</h2><p>经过了1个月的疯狂加班，终于将天天领鸡蛋项目编码完成，并且基本测试完成。但是对于我来说这个任务并没有完全完成好。原因有：</p><ul><li>1、在项目开始阶段没有定位自己的角色。在目前这个阶段我们三个开发均属于“半吊子”。而此时作为领导的三郎是希望将我定位为技术主要负责人。而我却并没有做好如此的准备。这导致了项目开始阶段我决意采用小游戏的方案来实现。但是最终踩坑。</li><li>2、没有抓住问题的重点。我们的项目的目的并不是养一只小鸡。正在的本质目标是培养用户的做任务的习惯。而做任务才是我们能带来利益的关键。故，应该把事务的本质抓住。项目开始时立刻验证功能逻辑是否走得通。这样在技术选项时即可将问题找到，避免了后面的弯路。</li><li>3、于团队合作层面来说，这次团队合作并不正常。项目一开始，整体开发人员中只有我一人处于针对项目工作。其余人员处于“自我提升”中。在两个星期后才开始正式得进入开发状态中，后才发现问题所在。这也是本次ORK没有完成的一个主要原因。</li></ul><h2 id="2、心态上"><a href="#2、心态上" class="headerlink" title="2、心态上"></a>2、心态上</h2><p>2019年始，工作了4年。从上海转杭州也已经工作满两年。一直从事iOS开发工作。对于iOS开发的技能提升的确在每一年都有很大的提升。但是我现在依然觉得只是认知上的提升。2018年我尝试了RAC、Swift、RxSwift、组件化、OpenCV等等。但是却属于一知半解。这种效果并不是我现在想看到的。于我来说并没有益处。2018年低，公司大裁员。在急缺前端开发的时候裁掉了仅有的两位前端开发人员。转让我、小海、志豪三个客户端开发人员来做前端小程序开发。一开始是很可以接受的。心理想着有机会可以做小程序了，挺有意思的。但是后来我渐渐感觉小程序、前端市场的确火爆，而iOS行业并不景气。这让我心态确实波动不少。现在围绕着我的是如何高薪转做其他技术行业。这是一种对iOS行业丧失信心，对其他行业缺乏自信的感觉。</p><h2 id="3、规划"><a href="#3、规划" class="headerlink" title="3、规划"></a>3、规划</h2><p>今年必须在工资上有新的突破，2019年跳槽目标必须在20k以上。但是我由于3月份疯狂加班丧失了太多的复习时间。4月份必须认真复习。而此时的复习目标是现在必须定下来的。欠下的知识点必须一点一滴全部还上。那么接下来4月份的规划是如何呢：</p><ul><li>1、本着技术是一门精通，其他广阔涉猎的原则。不能丧失老本行，iOS技术必须扎实得打牢。</li><li>2、前端技术在工作中认真学习不断提升前端技术的认知。</li><li>3、java的学习先缓一缓。今年的目标达成即可。但是在4月份必须抽出时间对目前学习的java技术进行总结和回顾，防止发生遗忘的现象。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 感想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工作总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS知识点备忘</title>
      <link href="/20190327-iOSPoints.html"/>
      <url>/20190327-iOSPoints.html</url>
      
        <content type="html"><![CDATA[<h3 id="软件基础"><a href="#软件基础" class="headerlink" title="软件基础"></a>软件基础</h3><h4 id="数据结构-amp-算法"><a href="#数据结构-amp-算法" class="headerlink" title="数据结构 &amp; 算法"></a>数据结构 &amp; 算法</h4><!-- - [ ] 基本的算法和数据结构（排序搜索算法, 数组, 队列）- [ ] 较复杂数据结构的灵活应用（二叉树, 图等）- [ ] 复杂的专项算法 --><h4 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h4><ul><li style="list-style: none"><input type="checkbox"> Http</li></ul><h3 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h3><h4 id="Objective-C、Swift"><a href="#Objective-C、Swift" class="headerlink" title="Objective-C、Swift"></a>Objective-C、Swift</h4><ul><li><p>[ ] Objective-C</p><ul><li style="list-style: none"><input type="checkbox"> 内存管理</li><li style="list-style: none"><input type="checkbox"> Block的理解和使用</li><li style="list-style: none"><input type="checkbox"> 多线程</li><li style="list-style: none"><input type="checkbox"> iOS多线程编程（Thread,GCD,NSOperation）</li><li style="list-style: none"><input type="checkbox"> OC对象的本质</li><li style="list-style: none"><input type="checkbox"> KVO探索实践</li><li style="list-style: none"><input type="checkbox"> runtime理解和使用</li><li style="list-style: none"><input type="checkbox"> runloop理解和使用</li><li style="list-style: none"><input type="checkbox"> 消息转发机制</li><li style="list-style: none"><input type="checkbox"> AOP切片编程（Aspects）</li><li style="list-style: none"><input type="checkbox"> 自动释放池 @autoreleasepool</li></ul></li><li><p>[ ] Swift</p><ul><li style="list-style: none"><input type="checkbox"> iOS多线程编程（GCD）</li></ul></li></ul><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><ul><li style="list-style: none"><input type="checkbox"> iOS内存管理和调优</li><li style="list-style: none"><input type="checkbox"> iOS的文件系统和沙盒机制</li><li style="list-style: none"><input type="checkbox"> iOS系统的各种安全机制</li><li style="list-style: none"><input type="checkbox"> library,framework的制作</li><li style="list-style: none"><input type="checkbox"> LLVM 原理和调优</li><li style="list-style: none"><input type="checkbox"> LLVM、GCC、GNU和Clang对比</li></ul><h4 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h4><ul><li style="list-style: none"><input type="checkbox"> iOS网络和服务器编程（NSURLConnection,NSURLSession）</li><li style="list-style: none"><input type="checkbox"> iOS网络发送机制调整和优化（NSURLSession）</li><li style="list-style: none"><input type="checkbox"> Socket编程</li><li style="list-style: none"><input type="checkbox"> 网络传输中的各种保障</li><li style="list-style: none"><input type="checkbox"> 对传输协议的调整优化</li></ul><h4 id="数据库-amp-持久化方案"><a href="#数据库-amp-持久化方案" class="headerlink" title="数据库&amp;持久化方案"></a>数据库&amp;持久化方案</h4><ul><li style="list-style: none"><input type="checkbox"> 常规持久化方案（Keychain,NSUserDefaults,Sqlite,CoreData）</li><li style="list-style: none"><input type="checkbox"> 数据库的使用和设计（Sqlite）</li><li style="list-style: none"><input type="checkbox"> 数据结构优化，Sql调优</li></ul><h4 id="图形图像编程"><a href="#图形图像编程" class="headerlink" title="图形图像编程"></a>图形图像编程</h4><ul><li style="list-style: none"><input type="checkbox"> UIKit,Core Animation和Core Text的绘制</li><li style="list-style: none"><input type="checkbox"> Core Graphics, Quartz 2D, Media Player, AV Foundation</li><li style="list-style: none"><input type="checkbox"> OpenGL ES, GLKit, SpriteKit, SceneKit, Metal</li></ul><h4 id="iOS的安全机制"><a href="#iOS的安全机制" class="headerlink" title="iOS的安全机制"></a><a href="https://www.jianshu.com/p/6c70565b2c1f" target="_blank" rel="noopener">iOS的安全机制</a></h4><ul><li style="list-style: none"><input type="checkbox"> 本地数据存储安全（Keychain）</li><li style="list-style: none"><input type="checkbox"> 授权和身份验证</li><li style="list-style: none"><input type="checkbox"> 传输安全（对称, 非对称, SSL）</li><li style="list-style: none"><input type="checkbox"> App代码安全</li><li style="list-style: none"><input type="checkbox"> 代码签名机制</li><li style="list-style: none"><input type="checkbox"> DEP</li><li style="list-style: none"><input type="checkbox"> ASLP</li></ul><h4 id="Hybrid-编程"><a href="#Hybrid-编程" class="headerlink" title="Hybrid 编程"></a>Hybrid 编程</h4><ul><li style="list-style: none"><input type="checkbox"> WkWebView开发</li><li style="list-style: none"><input type="checkbox"> 前端-iOS通讯机制</li></ul><h4 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h4><ul><li style="list-style: none"><input type="checkbox"> 路由到中间件的转变</li><li style="list-style: none"><input type="checkbox"> 组件化模块划分方法</li><li style="list-style: none"><input type="checkbox"> pod管理组件化</li></ul><h4 id="RxSwift链式响应式编程、RAC"><a href="#RxSwift链式响应式编程、RAC" class="headerlink" title="RxSwift链式响应式编程、RAC"></a>RxSwift链式响应式编程、RAC</h4><ul><li style="list-style: none"><input type="checkbox"> RxSwift的简单使用</li><li style="list-style: none"><input type="checkbox"> MVVM架构</li></ul><h4 id="第三方库使用"><a href="#第三方库使用" class="headerlink" title="第三方库使用"></a>第三方库使用</h4><ul><li style="list-style: none"><input type="checkbox"> Texture<ul><li style="list-style: none"><input type="checkbox"> App性能提升方案</li></ul></li></ul><h4 id="业务能力"><a href="#业务能力" class="headerlink" title="业务能力"></a>业务能力</h4><ul><li style="list-style: none"><input type="checkbox"> 一般性业务功能需求分析及实现</li><li style="list-style: none"><input type="checkbox"> 重要业务模块的需求分析及实现</li><li style="list-style: none"><input type="checkbox"> 中小规模产品的架构，系统设计和实现</li><li style="list-style: none"><input type="checkbox"> 大规模产品或产品线的架构，系统设计和实现</li><li style="list-style: none"><input type="checkbox"> 平台级产品的架构，系统设计和实现</li></ul><h3 id="OpenCV图像识别技术"><a href="#OpenCV图像识别技术" class="headerlink" title="OpenCV图像识别技术"></a>OpenCV图像识别技术</h3><ul><li>图像边缘检测</li></ul>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String对比</title>
      <link href="/20190219-StringEqual.html"/>
      <url>/20190219-StringEqual.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在java中String.class equals方法的源码 </p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">@Override <span class="keyword">public</span> <span class="keyword">boolean</span> equals(Object other) &#123;</span><br><span class="line">    <span class="comment">/// 1、 先判断地址是否相同 </span></span><br><span class="line">    <span class="keyword">if</span> (other == <span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 2、判断对比对象是否是字符串</span></span><br><span class="line">    <span class="keyword">if</span> (other <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String s = (String)other;</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">count</span> = <span class="keyword">this</span>.<span class="keyword">count</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// 3、判断长度</span></span><br><span class="line">        <span class="keyword">if</span> (s.<span class="keyword">count</span> != <span class="keyword">count</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// 4、判断hash值是否相同</span></span><br><span class="line">        <span class="keyword">if</span> (hashCode() != s.hashCode()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// 5、一个字符串一个字符串对比</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">count</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (charAt(i) != s.charAt(i)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS-runloop笔记</title>
      <link href="/20190214-runloop.html"/>
      <url>/20190214-runloop.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、理解Runloop"><a href="#1、理解Runloop" class="headerlink" title="1、理解Runloop"></a>1、理解Runloop</h3><ul><li><p>Runloop 可以想象成一个“<strong>机智的循环</strong>”，类比 “while”循环,开启后会一直循环下去。而runloop循环是有事情做的时候才开始执行任务，没事情时就不用执行任务,节省无谓的等待和占用。</p></li><li><p>Runloop 可以让线程在需要做事的时候忙起来，不需要的话就让线程休眠。</p></li></ul><h3 id="2、Runloop和线程"><a href="#2、Runloop和线程" class="headerlink" title="2、Runloop和线程"></a>2、Runloop和线程</h3><ul><li>Runloop和线程是绑定在一起的, 每个线程都会有一个对应的Runloop对象,我们不能自己创建Runloop,但是可以获取当前线程的Runloop对象.</li><li>Runloop默认是不开启的,需要手动开启;主线程中的Runloop自动开启,其他线程的Runloop需要手动开启.</li><li>Runloop可以让线程一直活下去,相当于在线程中开了一个死循环.While循环.(<strong>注意</strong>:并不是在线程中设置”[[NSRunloop currentRunloop] run]”后即可保证线程一直存活,这涉及到Runloop接收和处理的事件,如果runloop未接收到任务,仅仅是run,那么线程并不会一直活下去).</li><li>Runloop是线程自带的一个循环机制,默认情况下循环并不开启.当runloop接收到指定Mode的任务并且开启后,这个机制便会让这个线程去执行这个任务.所以runloop这个循环导致了线程不会挂掉.</li></ul><p>验证:<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">///<span class="number">1</span>、重写了<span class="symbol">NSThread</span>,在<span class="symbol">TRThread</span>的dealloc中添加了打印日志 <span class="symbol">NSLog</span>(@<span class="string">"线程死了"</span>);</span><br><span class="line"></span><br><span class="line">///<span class="number">2</span>、开启一个子线程,接下来研究这个线程中的<span class="symbol">RunLoop</span>对象在干啥</span><br><span class="line"><span class="symbol">TRThread</span> *thread = [[<span class="symbol">TRThread</span> alloc] initWithBlock:^&#123;</span><br><span class="line">    //这是线程的第一个任务————做个自我介绍</span><br><span class="line">    <span class="symbol">NSLog</span>(@<span class="string">"我是线程:%@"</span>,[<span class="symbol">TRThread</span> currentThread]);</span><br><span class="line"></span><br><span class="line">    [[<span class="symbol">NSRunLoop</span> currentRunLoop] run];</span><br><span class="line">    <span class="symbol">NSLog</span>(@<span class="string">"线程任务执行完成,线程要死了"</span>);</span><br><span class="line">&#125;];</span><br><span class="line">[thread start];</span><br></pre></td></tr></table></figure></p><p>结果:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">46505:1552649</span>] 我是线程:&lt;TRThread: <span class="number">0x6000010bf300</span>&gt;&#123;number = <span class="number">3</span>, name = (<span class="literal">null</span>)&#125;</span><br><span class="line">[<span class="meta">46505:1552649</span>] 线程任务执行完成,线程要死了</span><br><span class="line">[<span class="meta">46505:1552649</span>] 线程走了</span><br></pre></td></tr></table></figure></p><h3 id="3、Runloop的任务来源-Source"><a href="#3、Runloop的任务来源-Source" class="headerlink" title="3、Runloop的任务来源 Source"></a>3、Runloop的任务来源 Source</h3><p>通过下图可以知道runloop接收两种事件源————Input Source、 Timer Source<br><img src="https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/Multithreading/Art/runloop.jpg" alt="runloop工作模式"></p><ul><li>其中Input Source分为 <ul><li>Post 系统层(sorket)</li><li>Custom 用户创建的Source</li><li>performSelectore </li></ul></li></ul><h3 id="4、Runloop-Mode"><a href="#4、Runloop-Mode" class="headerlink" title="4、Runloop Mode"></a>4、Runloop Mode</h3><p>给Runloop添加的每一个事件源都必须设置mode. runloop只运行指定状态的任务.常见状态有三种:</p><ul><li>NSDefaultRunLoopMode  默认</li><li>UITrackingRunLoopMode UI相关</li><li>NSRunLoopCommonModes  组合(NSDefaultRunLoopMode&amp;UITrackingRunLoopMode)</li></ul><p>常见场景: 如下代码,当页面上有ScrollView滑动时,定时器不被触发 ,因为当Scrollview滑动时主现场的runloop执行的是 UITrackingRunLoopMode,而不执行NSDefaultRunLoopMode的任务<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">NSTimer *timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">1</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(callThings) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</span><br><span class="line">[[NSRunLoop currentRunLoop] <span class="string">addTimer:</span>timer <span class="string">forMode:</span>NSDefaultRunLoopMode];</span><br><span class="line"><span class="comment">///修改为CommonModes即可</span></span><br><span class="line"><span class="comment">//[[NSRunLoop currentRunLoop] addTimer:timer forMode:NSRunLoopCommonModes];</span></span><br></pre></td></tr></table></figure></p><p>要切换mode,需要停止当前的loop,重启新的loop</p><h3 id="5、Runloop-Observer"><a href="#5、Runloop-Observer" class="headerlink" title="5、Runloop Observer"></a>5、Runloop Observer</h3><p>(未完待续)</p><p>相关文章:<br><a href="https://opensource.apple.com/tarballs/CF/" target="_blank" rel="noopener">runloop源码</a><br><a href="https://v.youku.com/v_show/id_XODgxODkzODI0.html" target="_blank" rel="noopener">孙源分享的视频</a><br><a href="https://blog.ibireme.com/2015/05/18/runloop/" target="_blank" rel="noopener">https://blog.ibireme.com/2015/05/18/runloop/</a><br><a href="https://www.jianshu.com/p/adf9eb244e81" target="_blank" rel="noopener">RunLoop在iOS开发中的应用</a></p>]]></content>
      
      
      <categories>
          
          <category> iOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用笔记</title>
      <link href="/20190212-hexonote.html"/>
      <url>/20190212-hexonote.html</url>
      
        <content type="html"><![CDATA[<ul><li><p>0.创建hexo框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;foldername&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folername&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></li><li><p>1.创建笔记</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> [layout] &lt;<span class="built_in">title</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// layout : post \ page \ draft</span></span><br></pre></td></tr></table></figure></li><li><p>2.生成网站页面(generate)</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo g</span><br></pre></td></tr></table></figure></li><li><p>3.运行网页(service)</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo s</span><br></pre></td></tr></table></figure></li><li><p>4、清理缓存</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo clean</span><br></pre></td></tr></table></figure></li><li><p>5、发布</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo d</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
